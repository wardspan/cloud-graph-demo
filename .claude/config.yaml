# Cloud Threat Graph Lab - Claude Context Configuration
# Educational Cloud Security Platform with Interactive Learning

project_name: "Cloud Threat Graph Lab"
project_type: "Educational Security Platform"
last_updated: "2025-07-28"

# Project Overview
description: |
  Comprehensive educational cloud security platform combining Neo4j graph database
  analysis with interactive learning. Features 10 realistic attack scenarios,
  dynamic asset discovery simulation, explainable machine learning, and 
  structured learning paths from beginner to expert level. Built with Docker
  containerization for easy deployment in educational and enterprise environments.

# Project Summary
summary: |
  This is a production-ready educational platform for cloud security training
  that teaches threat analysis through hands-on graph database exploration.
  The platform simulates realistic cloud environments (AWS, Azure, Kubernetes)
  populated with intentionally vulnerable configurations to demonstrate attack
  paths, privilege escalation, and cross-cloud federation attacks.
  
  Key educational features:
  - 10 interactive Jupyter notebooks with explainable AI
  - 4 structured learning paths (Beginner → Expert, 3-10 hours each)
  - Real-time asset discovery simulation using Cartography-style enumeration
  - MITRE ATT&CK framework integration with 22+ techniques
  - Professional dashboard with risk-based scenario organization
  - LocalStack AWS emulation for hands-on experience
  
  Technical architecture uses Docker Compose orchestration with Neo4j graph
  database, interactive dashboard, Jupyter Lab educational environment, and
  mock cloud services for realistic training scenarios.

# Architecture Overview
architecture: |
  Multi-container Docker environment with service mesh architecture:
  
  Frontend Layer:
  - Dashboard (Nginx + JavaScript) - Professional 2x5 grid interface
  - Jupyter Lab - Educational notebooks with explainable ML
  
  Backend Services:
  - Neo4j Graph Database - Core data storage and analysis engine
  - Cartography Simulator - Asset discovery enumeration service
  - LocalStack - AWS API emulation for realistic cloud simulation
  
  Data Layer:
  - Unified data loader with single-transaction consistency
  - MITRE ATT&CK integration with technique mappings
  - Mock cloud infrastructure (AWS/Azure/Kubernetes) with vulnerabilities
  
  Educational Layer:
  - Structured learning paths with prerequisite tracking
  - Interactive assessments with immediate feedback
  - Progress analytics and achievement system
  - Explainable AI models for security anomaly detection

# Architecture & Services
services:
  neo4j:
    port: "7474 (browser), 7687 (bolt)"
    purpose: "Graph database storing attack scenarios and relationships"
    credentials: "neo4j/cloudsecurity"
    status: "healthy"
    data_model: "Users, Roles, Services, Assets with security relationships"
    key_features: ["43 nodes", "25 relationships", "10 attack scenarios"]
  
  dashboard:
    port: 3000
    purpose: "Interactive web interface for scenario analysis"
    technology: "Nginx + JavaScript + CSS Grid"
    layout: "2x5 professional grid with risk-based color coding"
    features: ["Neo4j browser integration", "Real-time asset discovery", "MITRE technique mapping"]
    status: "running"
  
  cartography:
    purpose: "Simulates realistic cloud asset discovery (Cartography-style)"
    technology: "Python + Neo4j driver + LocalStack integration"
    simulation_phases: ["Foundation", "IAM", "Compute", "Storage", "Serverless", "Relationships", "Security Analysis"]
    status: "operational (recently fixed)"
    recent_fixes: ["LocalStack health check condition", "Neo4j null value handling", "Neo4j 5.15 syntax compatibility"]
  
  localstack:
    port: 4566
    purpose: "AWS service emulation providing realistic cloud API responses"
    services: "ec2,s3,iam,lambda,dynamodb,apigateway,sts,secretsmanager,ssm"
    mock_resources: ["VPC with subnets", "Security groups", "IAM roles/users", "S3 buckets", "Lambda functions"]
    status: "healthy"
  
  jupyter-lab:
    port: 8888
    purpose: "Educational platform with interactive machine learning notebooks"
    token: "cloudsecurity"
    technology: "Jupyter with scipy-notebook base + custom security libraries"
    notebooks: 10
    features: ["Neo4j integration", "Explainable AI", "Interactive assessments"]
    status: "healthy"
  
  data-loader:
    purpose: "Robust unified data loading service with single-transaction approach"
    technology: "Neo4j cypher-shell with error handling"
    approach: "Single transaction prevents race conditions and ensures data consistency"
    loads: "29 nodes, 25 relationships across all 10 attack scenarios"

# Educational Content
learning_paths:
  beginner: "Security Graph Fundamentals (3-4 hours)"
  intermediate: "Advanced Threat Analysis (4-5 hours)"
  advanced: "ML Security Analytics (6-8 hours)"
  expert: "Security Research & Development (8-10 hours)"

notebooks:
  - "01-Graph-Fundamentals.ipynb - Security graph basics"
  - "02-Attack-Path-Discovery.ipynb - Advanced attack path analysis"
  - "05-Anomaly-Detection-ML.ipynb - Machine learning with explanations"
  - "03-MITRE-Analysis.ipynb - Framework integration (Coming Soon)"
  - "04-Asset-Discovery-Analysis.ipynb - Cartography analysis (Coming Soon)"
  - "06-Graph-Algorithms-Security.ipynb - Graph theory (Coming Soon)"
  - "07-Risk-Scoring-Models.ipynb - Risk assessment (Coming Soon)"
  - "08-Threat-Hunting-Automation.ipynb - Automated detection (Coming Soon)"
  - "09-Custom-Scenario-Building.ipynb - Creating scenarios (Coming Soon)"
  - "10-Advanced-Graph-Mining.ipynb - Research-level analytics (Coming Soon)"

# Attack Scenarios (10 Total)
scenarios:
  aws_privilege_escalation:
    risk: "CRITICAL"
    description: "Developer user → role assumption → admin access"
    mitre_techniques: ["T1548", "T1134", "T1069"]
  
  kubernetes_rbac:
    risk: "HIGH"
    description: "Pod → ServiceAccount → ClusterRole escalation"
    mitre_techniques: ["T1611", "T1068"]
  
  secrets_sprawl:
    risk: "HIGH"
    description: "Hardcoded GitHub token → Terraform state → cloud admin"
    mitre_techniques: ["T1552", "T1078"]
  
  serverless_attack:
    risk: "HIGH"
    description: "API Gateway → overprivileged Lambda → data exfiltration"
    mitre_techniques: ["T1190", "T1068", "T1041"]
  
  cross_cloud_attack:
    risk: "CRITICAL"
    description: "Azure AD → CI/CD → AWS role → S3 access"
    mitre_techniques: ["T1199", "T1078", "T1550"]
  
  container_escape:
    risk: "CRITICAL"
    description: "Compromised package → host compromise"
    mitre_techniques: ["T1610", "T1611", "T1068"]
  
  supply_chain_compromise:
    risk: "CRITICAL"
    description: "NPM package → CI/CD injection → cloud deployment → secrets"
    mitre_techniques: ["T1195", "T1199", "T1552"]
  
  multi_cloud_federation:
    risk: "CRITICAL"
    description: "Azure AD guest → OIDC federation → AWS production"
    mitre_techniques: ["T1550.001", "T1078", "T1199"]
  
  asset_discovery_attack:
    risk: "HIGH"
    description: "Cloud service discovery → overprivileged resource → exploitation"
    mitre_techniques: ["T1526", "T1087", "T1069", "T1548"]
    requires: "Asset discovery simulation"
  
  cross_cloud_infrastructure:
    risk: "CRITICAL"
    description: "Multi-cloud federation discovery → trust relationship exploitation"
    mitre_techniques: ["T1538", "T1526", "T1550.001", "T1199"]
    requires: "Asset discovery simulation"

# Recent Work & Fixes
recent_activity:
  - "Fixed cartography service LocalStack health check (available → running)"
  - "Fixed Neo4j null value handling in EC2 instance simulation"
  - "Fixed Neo4j 5.15 syntax (exists() → IS NOT NULL)"
  - "Cartography asset discovery simulation now operational"
  - "All 10 attack scenarios functional with comprehensive data"

# Key Files & Descriptions
key_files:
  # Core Configuration
  docker-compose.yml:
    purpose: "Main orchestration file defining all services, dependencies, and networking"
    key_features: ["Service health checks", "Volume mounts", "Environment variables", "Network isolation"]
    
  # Data & Database
  neo4j/unified-data-load.cypher:
    purpose: "Single-transaction data loader ensuring consistent graph state"
    content: "Creates 29 nodes (Users, Roles, Services) and 25 relationships for all 10 scenarios"
    approach: "Replaces multi-file loading to prevent race conditions"
    size: "~1000 lines of comprehensive Cypher statements"
    
  # Frontend Dashboard
  dashboard/index.html:
    purpose: "Main dashboard interface with professional 2x5 grid layout"
    features: ["Risk-based color coding", "Scenario information panels", "Educational modals"]
    
  dashboard/app.js:
    purpose: "JavaScript application managing dashboard interactions and Neo4j integration"
    key_classes: ["ThreatGraphDashboard", "CartographyService integration"]
    features: ["Real-time statistics", "Scenario management", "Neo4j browser launching"]
    
  dashboard/cartography-service.js:
    purpose: "Service layer for asset discovery simulation management"
    functionality: ["Discovery progress tracking", "HTTP API communication", "UI state updates"]
    
  dashboard/style.css:
    purpose: "Professional styling with responsive design and risk-based visual hierarchy"
    design: "2x5 CSS Grid with hover effects, modal overlays, and accessibility features"
    
  # Asset Discovery Simulation
  cartography/simulate-discovery.py:
    purpose: "Python-based cloud asset discovery simulation (Cartography-style)"
    phases: "7-phase progressive discovery: Foundation→IAM→Compute→Storage→Serverless→Relationships→Security"
    integration: "Neo4j driver + LocalStack AWS API simulation"
    recent_fixes: ["Null value handling", "Neo4j 5.15 syntax compatibility"]
    
  cartography/run-discovery.sh:
    purpose: "Bash orchestration script managing discovery simulation lifecycle"
    responsibilities: ["Service readiness checks", "Discovery execution", "HTTP API server for manual triggers"]
    recent_fixes: ["LocalStack health check condition (available→running)"]
    
  cartography/Dockerfile:
    purpose: "Container build definition for discovery simulation service"
    base: "python:3.11-slim with cartography, boto3, neo4j dependencies"
    
  # AWS Emulation
  localstack/init/01-setup-aws-resources.sh:
    purpose: "LocalStack initialization creating realistic AWS mock infrastructure"
    creates: ["VPC with subnets", "Security groups with vulnerabilities", "IAM roles/users", "S3 buckets", "Lambda functions"]
    integration: "Provides realistic cloud API responses for hands-on learning"
    
  # Educational Platform
  notebooks/01-Graph-Fundamentals.ipynb:
    purpose: "Beginner-level interactive notebook teaching security graph concepts"
    content: ["Graph theory basics", "Cypher query fundamentals", "Attack path visualization"]
    
  notebooks/02-Attack-Path-Discovery.ipynb:
    purpose: "Intermediate-level notebook for advanced attack path analysis"
    content: ["Multi-hop attack analysis", "MITRE ATT&CK integration", "Complex query techniques"]
    
  notebooks/05-Anomaly-Detection-ML.ipynb:
    purpose: "Advanced-level notebook teaching explainable machine learning for security"
    content: ["Isolation Forest", "Local Outlier Factor", "Educational ML explanations"]
    
  # Educational Framework
  learning-platform/learning-paths/beginner-path.json:
    purpose: "Structured learning path definition with modules, assessments, and prerequisites"
    structure: "5 modules: Intro→Basic Queries→Attack Paths→Hands-on Lab→Assessment"
    features: ["Learning objectives", "Time estimates", "Certification requirements"]
    
  learning-platform/progress-tracking/learning_analytics.py:
    purpose: "Educational analytics engine for tracking student progress and adaptive learning"
    functionality: ["Progress tracking", "Skill assessment", "Personalized recommendations"]
    
  # Analytics & ML
  analytics/ml-models/anomaly_detector.py:
    purpose: "Educational anomaly detection engine with explainable machine learning"
    algorithms: ["Isolation Forest", "Local Outlier Factor", "DBSCAN clustering"]
    educational_focus: "Step-by-step explanations of ML decision-making for security applications"
    
  # Documentation
  docs/attack-scenarios-enhanced.md:
    purpose: "Comprehensive documentation of all 10 attack scenarios"
    content: ["Technical details", "MITRE ATT&CK mappings", "Detection methods", "Mitigation strategies"]
    
  docs/mitre-integration-guide.md:
    purpose: "Guide for MITRE ATT&CK framework integration and technique mapping"
    
  docs/phase4-educational-platform.md:
    purpose: "Documentation for the educational platform architecture and features"
    
  # Scripts & Utilities
  scripts/quick-fix.sh:
    purpose: "Emergency data loading script for troubleshooting data consistency issues"
    
  scripts/reset-environment.sh:
    purpose: "Complete environment reset and reinitialization script"
    
  scripts/start-discovery-simulation.sh:
    purpose: "Manual trigger for asset discovery simulation"

# Essential Queries for Analysis
essential_queries:
  node_overview: "MATCH (n) RETURN labels(n)[0] as NodeType, count(n) as Count ORDER BY Count DESC"
  attack_paths: "MATCH path = (start:User)-[*1..4]->(target:Service) WHERE start.access_level = 'developer' AND target.contains_pii = true RETURN start.name, target.name, length(path) ORDER BY length(path) LIMIT 5"
  privilege_escalation: "MATCH (user:User)-[:ASSUMES_ROLE|CAN_ESCALATE_TO*1..3]->(role:Role) WHERE user.access_level = 'developer' RETURN user.name, role.name, role.permissions"
  mitre_mapping: "MATCH (n) WHERE n.mitre_techniques IS NOT NULL UNWIND n.mitre_techniques as technique RETURN technique, count(n) ORDER BY count(n) DESC"

# Troubleshooting
common_issues:
  no_query_results: "Run ./scripts/quick-fix.sh or check data loading"
  services_not_starting: "docker-compose down && docker-compose up -d"
  neo4j_connection: "Wait 60+ seconds for full initialization"
  cartography_waiting: "Check LocalStack health status and service readiness"

# Educational Access Points
access_points:
  dashboard: "http://localhost:3000"
  neo4j_browser: "http://localhost:7474 (neo4j/cloudsecurity)"
  jupyter_lab: "http://localhost:8888 (token: cloudsecurity)"
  localstack: "http://localhost:4566"

# Technical Implementation Details
technical_details:
  data_consistency:
    approach: "Single-transaction unified data loading eliminates race conditions"
    reliability: "100% consistent data loading across container restarts"
    nodes: 29
    relationships: 25
    scenarios_verified: 10
    
  containerization:
    orchestration: "Docker Compose with health checks and dependency management"
    networking: "Isolated bridge network (cloud-threat-net)"
    persistence: "Named volumes for Neo4j data and logs"
    scalability: "Supports 10-25 concurrent students"
    
  security_simulation:
    mock_environments: ["AWS (LocalStack)", "Azure AD", "Kubernetes RBAC"]
    vulnerability_types: ["Privilege escalation", "Cross-cloud federation", "Supply chain", "Container escape"]
    realism: "Based on real-world attack patterns and MITRE ATT&CK techniques"
    
  educational_methodology:
    learning_theory: "Progressive disclosure with hands-on experimentation"
    assessment: "Multi-modal evaluation with immediate feedback"
    personalization: "Adaptive recommendations based on performance"
    certification: "Achievement system with verifiable competency badges"

# Current Project State
current_state:
  development_phase: "Production-ready educational platform"
  stability: "All core services operational and tested"
  last_issues_resolved: "2025-07-28 - Cartography service fixes completed"
  deployment_ready: true
  student_capacity: "10-25 concurrent users"
  
  known_working_features:
    - "All 10 attack scenarios return results"
    - "Neo4j browser integration with pre-loaded queries"
    - "Asset discovery simulation (7-phase progressive enumeration)"
    - "Educational dashboard with risk-based organization"
    - "Jupyter Lab with explainable ML notebooks"
    - "LocalStack AWS service emulation"
    - "MITRE ATT&CK technique mapping"
    
  recent_maintenance:
    - "Fixed cartography LocalStack health check (2025-07-28)"
    - "Resolved Neo4j null value handling (2025-07-28)"
    - "Updated Neo4j 5.15 syntax compatibility (2025-07-28)"
    - "Verified all 10 scenarios return expected results"

# Project Goals & Vision
goals:
  primary:
    - "Comprehensive cloud security education platform"
    - "Bridge theory-practice gap through interactive learning"
    - "Explainable AI for security analytics education"
    - "Real-world attack simulation in safe environment"
    
  secondary:
    - "Enterprise security team training"
    - "Academic cybersecurity curriculum support"
    - "Security certification preparation"
    - "Threat hunting and incident response training"
    
  technical:
    - "Scalable educational infrastructure"
    - "Production-ready deployment architecture"
    - "Comprehensive assessment and analytics"
    - "Integration with security tools and frameworks"

# Security & Ethics
security_notes:
  educational_focus: "Defensive security training only - no offensive tools"
  data_safety: "No real cloud credentials required - all simulation with mock data"
  environment: "Fully isolated local environment with no external dependencies"
  ethics: "Designed for legitimate security education and professional development"
  compliance: "Suitable for corporate training and academic institutions"
  
# Deployment & Operations
deployment:
  requirements:
    system: "Docker and Docker Compose"
    memory: "4GB RAM minimum, 8GB recommended"
    storage: "2GB for images and data"
    network: "Local ports 3000, 7474, 7687, 8888, 4566"
    
  startup_time: "60-90 seconds for full initialization"
  health_checks: "All services have automated health monitoring"
  data_persistence: "Neo4j data survives container restarts"
  backup_strategy: "Volume-based backup of graph database"
  
  troubleshooting:
    common_fixes: ["./scripts/quick-fix.sh", "docker-compose restart", "Wait for full initialization"]
    monitoring: "Container logs via docker-compose logs [service]"
    data_verification: "Query node counts and relationship verification"