# Robust Data Loader Configuration
# Replace the data-loader section in docker-compose.yml with this

  data-loader:
    image: neo4j:5.15-community
    container_name: cloud-threat-loader
    depends_on:
      neo4j:
        condition: service_healthy
    volumes:
      - ./neo4j/unified-data-load.cypher:/var/lib/neo4j/import/unified-data.cypher
    networks:
      - cloud-threat-net
    command: >
      sh -c "
        echo '🚀 Cloud Threat Graph Lab - Robust Data Loader v2.0' &&
        echo '' &&
        echo '⏳ Waiting for Neo4j to be fully ready...' &&
        sleep 20 &&
        echo '' &&
        echo '🔍 Testing Neo4j connection...' &&
        until cypher-shell -a bolt://neo4j:7687 -u neo4j -p cloudsecurity 'RETURN 1 as test;' 2>/dev/null; do
          echo '⏳ Neo4j not ready yet, retrying in 5 seconds...'
          sleep 5
        done &&
        echo '✅ Neo4j connection established!' &&
        echo '' &&
        echo '📊 Loading unified data (single transaction for consistency)...' &&
        cypher-shell -a bolt://neo4j:7687 -u neo4j -p cloudsecurity -f /var/lib/neo4j/import/unified-data.cypher &&
        echo '' &&
        echo '✅ Data loading completed successfully!' &&
        echo '' &&
        echo '🎯 Verifying data integrity...' &&
        NODES=\$(cypher-shell -a bolt://neo4j:7687 -u neo4j -p cloudsecurity \"MATCH (n) RETURN count(n) as count\" --format plain | tail -1) &&
        RELS=\$(cypher-shell -a bolt://neo4j:7687 -u neo4j -p cloudsecurity \"MATCH ()-[r]->() RETURN count(r) as count\" --format plain | tail -1) &&
        echo \"📈 Loaded: \$NODES nodes, \$RELS relationships\" &&
        echo '' &&
        echo '🧪 Testing sample queries...' &&
        echo '   Testing AWS Privilege Escalation...' &&
        AWS_RESULTS=\$(cypher-shell -a bolt://neo4j:7687 -u neo4j -p cloudsecurity \"MATCH path = (user:User)-[*1..3]->(service:Service) WHERE user.access_level = 'developer' AND (service.contains_pii = true OR service.type = 'S3Bucket') RETURN count(*) as count\" --format plain | tail -1) &&
        echo \"   ✅ AWS query returns \$AWS_RESULTS results\" &&
        echo '   Testing Supply Chain Compromise...' &&
        SC_RESULTS=\$(cypher-shell -a bolt://neo4j:7687 -u neo4j -p cloudsecurity \"MATCH path = (pkg:NPMPackage)-[*1..5]->(secret:SecretsManager) WHERE pkg.compromised = true RETURN count(*) as count\" --format plain | tail -1) &&
        echo \"   ✅ Supply Chain query returns \$SC_RESULTS results\" &&
        echo '   Testing Asset Discovery...' &&
        AD_RESULTS=\$(cypher-shell -a bolt://neo4j:7687 -u neo4j -p cloudsecurity \"MATCH path = (start)-[*1..4]->(sensitive) WHERE start.discovered_via_cartography = true AND sensitive.contains_pii = true RETURN count(*) as count\" --format plain | tail -1) &&
        echo \"   ✅ Asset Discovery query returns \$AD_RESULTS results\" &&
        echo '' &&
        echo '🏆 ALL SYSTEMS READY!' &&
        echo '' &&
        echo '🌐 Access Points:' &&
        echo '   Dashboard: http://localhost:3000' &&
        echo '   Neo4j Browser: http://localhost:7474 (neo4j/cloudsecurity)' &&
        echo '   LocalStack: http://localhost:4566' &&
        echo '' &&
        echo '💡 All 10 attack scenarios are ready with verified data!' &&
        echo '💡 Use \"🔍 Discover Infrastructure\" for asset discovery simulation'
      "
    restart: "no"
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -a bolt://neo4j:7687 -u neo4j -p cloudsecurity 'MATCH (n:User) RETURN count(n) > 0 as has_data' | grep -q 'true'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s