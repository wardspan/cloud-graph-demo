services:
  neo4j:
    image: neo4j:5.15-community
    container_name: cloud-threat-neo4j
    ports:
      - "7474:7474"  # Neo4j browser
      - "7687:7687"  # Bolt protocol
    environment:
      - NEO4J_AUTH=neo4j/cloudsecurity
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.*
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
    volumes:
      - ./neo4j/data:/data
      - ./neo4j/logs:/logs
      - ./neo4j/import:/var/lib/neo4j/import
      - ./neo4j/plugins:/plugins
      - ./neo4j/init.cypher:/var/lib/neo4j/import/init.cypher
    networks:
      - cloud-threat-net
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p cloudsecurity 'MATCH (n) RETURN count(n);' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  dashboard:
    build: ./dashboard
    container_name: cloud-threat-dashboard
    ports:
      - "3000:80"
    depends_on:
      neo4j:
        condition: service_healthy
    networks:
      - cloud-threat-net
    environment:
      - NEO4J_URL=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=cloudsecurity

  # LocalStack for AWS service emulation
  localstack:
    image: localstack/localstack:3.0
    container_name: cloud-threat-localstack
    ports:
      - "4566:4566"  # LocalStack edge port
    environment:
      - SERVICES=ec2,s3,iam,lambda,dynamodb,apigateway,sts,secretsmanager,ssm
      - DEBUG=0
      - PERSISTENCE=0
    volumes:
      - "./localstack/init:/etc/localstack/init/ready.d"
    networks:
      - cloud-threat-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Cartography for asset discovery
  cartography:
    build: ./cartography
    container_name: cloud-threat-cartography
    depends_on:
      neo4j:
        condition: service_healthy
      localstack:
        condition: service_healthy
    volumes:
      - ./cartography/config:/etc/cartography
      - ./cartography/mock-data:/opt/cartography/mock-data
    networks:
      - cloud-threat-net
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=cloudsecurity
      - AWS_ENDPOINT_URL=http://localstack:4566
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
      - CARTOGRAPHY_SIMULATION_MODE=true
    command: >
      sh -c "
        echo '🗺️ Cloud Threat Graph Lab - Cartography Asset Discovery' &&
        echo 'Waiting for services to be ready...' &&
        sleep 30 &&
        echo '🔍 Starting asset discovery simulation...' &&
        /opt/cartography/run-discovery.sh
      "
    restart: "no"

  data-loader:
    image: neo4j:5.15-community
    container_name: cloud-threat-loader
    depends_on:
      neo4j:
        condition: service_healthy
    volumes:
      - ./neo4j/unified-data-load.cypher:/var/lib/neo4j/import/unified-data.cypher
    networks:
      - cloud-threat-net
    command: >
      sh -c "
        echo '🚀 Cloud Threat Graph Lab - Robust Data Loader v2.0' &&
        echo '' &&
        echo '⏳ Waiting for Neo4j to be fully ready...' &&
        sleep 20 &&
        echo '' &&
        echo '🔍 Testing Neo4j connection...' &&
        until cypher-shell -a bolt://neo4j:7687 -u neo4j -p cloudsecurity 'RETURN 1 as test;' 2>/dev/null; do
          echo '⏳ Neo4j not ready yet, retrying in 5 seconds...'
          sleep 5
        done &&
        echo '✅ Neo4j connection established!' &&
        echo '' &&
        echo '📊 Loading unified data (single transaction for consistency)...' &&
        cypher-shell -a bolt://neo4j:7687 -u neo4j -p cloudsecurity -f /var/lib/neo4j/import/unified-data.cypher &&
        echo '' &&
        echo '✅ Data loading completed successfully!' &&
        echo '' &&
        echo '🎯 Verifying data integrity...' &&
        NODES=\$(cypher-shell -a bolt://neo4j:7687 -u neo4j -p cloudsecurity \"MATCH (n) RETURN count(n) as count\" --format plain | tail -1) &&
        RELS=\$(cypher-shell -a bolt://neo4j:7687 -u neo4j -p cloudsecurity \"MATCH ()-[r]->() RETURN count(r) as count\" --format plain | tail -1) &&
        echo \"📈 Loaded: \$NODES nodes, \$RELS relationships\" &&
        echo '' &&
        echo '🧪 Testing sample queries...' &&
        echo '   Testing AWS Privilege Escalation...' &&
        AWS_RESULTS=\$(cypher-shell -a bolt://neo4j:7687 -u neo4j -p cloudsecurity \"MATCH path = (user:User)-[*1..3]->(service:Service) WHERE user.access_level = 'developer' AND (service.contains_pii = true OR service.type = 'S3Bucket') RETURN count(*) as count\" --format plain | tail -1) &&
        echo \"   ✅ AWS query returns \$AWS_RESULTS results\" &&
        echo '   Testing Supply Chain Compromise...' &&
        SC_RESULTS=\$(cypher-shell -a bolt://neo4j:7687 -u neo4j -p cloudsecurity \"MATCH path = (pkg:NPMPackage)-[*1..5]->(secret:SecretsManager) WHERE pkg.compromised = true RETURN count(*) as count\" --format plain | tail -1) &&
        echo \"   ✅ Supply Chain query returns \$SC_RESULTS results\" &&
        echo '   Testing Asset Discovery...' &&
        AD_RESULTS=\$(cypher-shell -a bolt://neo4j:7687 -u neo4j -p cloudsecurity \"MATCH path = (start)-[*1..4]->(sensitive) WHERE start.discovered_via_cartography = true AND sensitive.contains_pii = true RETURN count(*) as count\" --format plain | tail -1) &&
        echo \"   ✅ Asset Discovery query returns \$AD_RESULTS results\" &&
        echo '' &&
        echo '🏆 ALL SYSTEMS READY!' &&
        echo '' &&
        echo '🌐 Access Points:' &&
        echo '   Dashboard: http://localhost:3000' &&
        echo '   Neo4j Browser: http://localhost:7474 (neo4j/cloudsecurity)' &&
        echo '   LocalStack: http://localhost:4566' &&
        echo '' &&
        echo '💡 All 10 attack scenarios are ready with verified data!' &&
        echo '💡 Use \"🔍 Discover Infrastructure\" for asset discovery simulation'
      "
    restart: "no"
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -a bolt://neo4j:7687 -u neo4j -p cloudsecurity 'MATCH (n:User) RETURN count(n) > 0 as has_data' | grep -q 'true'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Phase 4: Jupyter Lab Educational Platform
  jupyter-lab:
    image: jupyter/scipy-notebook:python-3.11
    container_name: cloud-threat-jupyter
    ports:
      - "8888:8888"  # Jupyter Lab interface
    depends_on:
      neo4j:
        condition: service_healthy
    volumes:
      - ./notebooks:/home/jovyan/notebooks
      - ./analytics:/home/jovyan/analytics
      - ./learning-platform:/home/jovyan/learning-platform
      - ./jupyter:/home/jovyan/jupyter
    networks:
      - cloud-threat-net
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=cloudsecurity
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=cloudsecurity
    working_dir: /home/jovyan/notebooks
    command: >
      bash -c "
        pip install neo4j networkx plotly scikit-learn seaborn ipywidgets &&
        echo '🎓 Installing Jupyter Widget System...' &&
        pip install -e /home/jovyan/jupyter/widgets &&
        echo '🤖 Phase 4: Educational Analytics Platform' &&
        echo '📚 Jupyter Lab with Interactive Instruction Widgets' &&
        echo '🔗 Access: http://localhost:8888 (token: cloudsecurity)' &&
        echo '📁 Starting in notebooks directory...' &&
        jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root --ServerApp.token='cloudsecurity'
      "
    restart: unless-stopped

networks:
  cloud-threat-net:
    driver: bridge

volumes:
  neo4j_data:
  neo4j_logs: